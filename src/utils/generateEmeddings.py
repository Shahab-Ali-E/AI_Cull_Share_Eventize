import torch
from src.config.settings import get_settings
from src.dependencies.mlModelsManager import ModelManager

settings = get_settings()
models = ModelManager.get_models(settings)
embedding_img_processor = models["embedding_img_processor"]
embedding_model = models["embedding_model"]

def generate_embeddings(image_name: str, image_pillow_obj):
    """
    Generates face embeddings from a given image.

    This function processes a PIL Image object of a face and generates embeddings using a pre-trained model.
    The image is first transformed into a format compatible with the model, and then the model produces embeddings 
    that represent the features of the face in the image. 

    Args:
        image_name (str): The name or identifier for the image. This is used in the return dictionary to associate
                          the embeddings with the image name.
        image_pillow_obj (PIL.Image.Image): A PIL Image object representing the face image from which embeddings
                                             are to be generated.

    Returns:
        dict: A dictionary containing:
            - 'name': The name of the image.
            - 'embeddings': A tensor representing the face embeddings generated by the model.

    Raises:
        Exception: If an error occurs during the image processing or embedding generation, an exception is raised
                   with an error message detailing the problem.
    """
    device = torch.device("cuda" if torch.cuda.is_available() else "cpu")
    try:
        # #Ensure the face image is resized to the expected input size of the model
        # resized_face = image_pillow_obj.resize((224, 224))

        # # Process the image using the model's processor
        # inputs = processor(resized_face).unsqueeze(0).to(device)

        # # Print out the shape of the tensor for debugging
        # print(f"Shape of pixel_values: {inputs.shape}")

        # # Get model output
        # with torch.no_grad():  # Disable gradient calculation
        #     outputs = model.encode_image(inputs)

        image = embedding_img_processor(image_pillow_obj, return_tensors="pt")

        pixel_values = image['pixel_values'].to(device)

        with torch.no_grad():
            outputs = embedding_model.get_image_features(pixel_values)

        embeddings = outputs[0]  # Extract embeddings

        # print(embeddings)

        return {
            'name': image_name,
            'embeddings': embeddings
        }

    except Exception as e:
        raise Exception(f"Error generating embeddings: {str(e)}")

